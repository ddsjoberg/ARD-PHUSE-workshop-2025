# ARDs using {cards} 

<a href="https://insightsengineering.github.io/cards/"><img src="https://insightsengineering.github.io/cards/latest-tag/logo.png" align="center" height="300" alt="cards website" /></a>

## {cards}: Introduction

-   Part of the Pharmaverse

-   Collaboration between Roche, GSK, Novartis, and Pfizer

-   Contains a variety of utilities for making ARDs

-   Can be used within the ARS workflow and separately

-   52K downloads per month ðŸ¤¯


## {cards}: `ard_continuous()`

```{r}
#| message: true
library(cards)

# create ARD with default summary statistics
ADSL |> 
  ard_continuous(
    variables = AGE
  )
```


## {cards}: `ard_continuous()` by variable

::: {.small}
- `by`: summary statistics are calculated by all combinations of the by variables, including unobserved factor levels
:::

```{r}
#| message: true
#| code-line-numbers: "4"
ADSL |> 
  ard_continuous(
    variables = AGE,
    by = ARM         # stats by treatment arm
  ) 
```

## {cards}: `ard_continuous()` statistics

::: {.small}
- `statistic`: specify univariate summary statistics. Accepts _any_ function, base R, from a package, or user-defined.
:::


```{r}
#| message: true
#| code-line-numbers: "7"
cv <- function(x)  sd(x, na.rm = TRUE)/mean(x, na.rm = TRUE)

ADSL |> 
  ard_continuous(  
    variables = AGE,
    by = ARM,
    statistic = ~ list(cv = cv) # customize statistics
  )

```

## {cards}: `ard_continuous()` statistics

::: {.small}
Customize the statistics returned for each variable
:::

```{r}
#| message: true
#| code-line-numbers: "4,6,7"
ADSL |> 
  dplyr::mutate(AGE2 = AGE) |> 
  ard_continuous(
    variables = c(AGE, AGE2),
    by = ARM,
    statistic = list(AGE = list(cv = cv),
                     AGE2 = continuous_summary_fns(c("mean","median")))
  )
```


## {cards}: `ard_continuous()` fmt_fn

::: {.small}
Override the default formatting functions
:::

```{r}
#| message: true
#| code-line-numbers: "6"
ADSL |> 
  ard_continuous(
    variables = AGE,
    by = ARM,                               
  ) |> 
  update_ard_fmt_fn(stat_names = "mean", fmt_fn = 0) |> 
  apply_fmt_fn() 
```

## {cards}: `ard_categorical()`

::: {.small}
- includes `n`, `%`, `N` by default
:::

```{r}
#| message: true
ADSL |> 
  ard_categorical(
    by = ARM,
    variables = AGEGR1
  ) 
```

::: {.small}

_Any unobserved levels of the variables will be present in the resulting ARD._
:::


## {cards}: Other Summary Functions 

- `ard_dichotomous()`: similar to `ard_categorical()`, but for dichotomous summaries

- `ard_hierarchical()`: similar to `ard_categorical()`, but built for nested tabulations, e.g. AE terms within SOC

- `ard_complex()`: similar to `ard_continuous()`, but the summary functions can be more complex and accepts other arguments like the full and subsetted (within the by groups) data sets.

- `ard_missing()`: tabulates rates of missingness

The results from all these functions are entirely compatible with one another, and can be stacked into a single data frame. ðŸ¥žðŸ¥žðŸ¥ž

## {cards}: Other Functions

In addition to exporting functions to prepare summaries, {cards} exports many utilities for wrangling ARDs and creating new ARDs. 

Constructing: `bind_ard()`, `nest_for_ard()`, `check_ard_structure()`, and many more

Wrangling: `rename_ard_columns()`, `get_ard_statistics()`, `replace_null_statistic()`, etc.


## {cards}: Stacking utilities

::: {.small}
- `data` and `.by` are shared by all `ard_*` calls

- Additional Options `.overall`, `.missing`, `.attributes`, and `.total_n` provide even more results

- By default, summaries of the `.by` variable are included
:::

```{r}
#| message: true
ADSL |> 
  ard_stack( 
    .by = ARM,      
    ard_continuous(variables = AGE, statistic = ~ continuous_summary_fns(c("mean","sd"))), 
    ard_categorical(variables = AGEGR1, statistic = ~ "p")
  )  
```

## Example: Demographics ARD

```{r}
#| echo: FALSE
#| message: FALSE
#| warning: FALSE
library(dplyr)
library(tidyr)

## Import data
adsl <- pharmaverseadam::adsl |>
  filter(SAFFL == "Y") |>
  left_join(
    pharmaverseadam::advs |>
      filter(PARAMCD %in% c("BMI", "HEIGHT", "WEIGHT"), !is.na(AVAL)) |>
      group_by(USUBJID, PARAMCD) |>
      arrange(ADY) |>
      slice(1) |>
      ungroup() |>
      select(USUBJID, PARAMCD, AVAL) |>
      pivot_wider(names_from = PARAMCD, values_from = AVAL),
    by = "USUBJID"
  )
```

## Exercise 1: Demographics ARD

First, compute the continuous summaries for AGE, BMI, HEIGHT, WEIGHT by TRT01A

```{r}
#| eval: FALSE
ard_continuous(
  data = adsl,
  by = ,
  variables =
)
```

## Exercise 1: Demographics ARD

First, compute the continuous summaries for AGE, BMI, HEIGHT, WEIGHT by TRT01A

```{r}
#| message: TRUE
ard_continuous(
  data = adsl,
  by = TRT01A,
  variables = c(AGE, BMI, HEIGHT, WEIGHT)
)
```

## Exercise 2: Demographics ARD

Next, compute the categorical summaries for AGEGR1, SEX, RACE, ETHNIC by TRT01A

```{r}
#| message: TRUE
#| eval: FALSE
ard_categorical(
  data = adsl,
  by = ,
  variables =
)
```

## Exercise 2: Demographics ARD

Next, compute the categorical summaries for AGEGR1, SEX, RACE, ETHNIC by TRT01A

```{r}
#| message: TRUE
ard_categorical(
  data = adsl,
  by = TRT01A,
  variables = c(AGEGR1, SEX, RACE, ETHNIC)
)
```

## Exercise 3: Demographics ARD

Perform all of the summaries in a single `ard_stack()` call, including:
   
    - summaries by TRT01A as performed above
    
    - continuous summaries from part A for AGE, BMI, HEIGHT, and WEIGHT
    
    - categorical summaries from part B for AGEGR1, SEX, RACE, ETHNIC

```{r}
#| eval: FALSE
ard_stack(
  data = adsl,
  .by = ,

  # add ard_* calls here

)
```

## Exercise 3: Demographics ARD

Perform all of the summaries in a single `ard_stack()` call, including:
   
    - summaries by TRT01A as performed above
    
    - continuous summaries from part A for AGE, BMI, HEIGHT, and WEIGHT
    
    - categorical summaries from part B for AGEGR1, SEX, RACE, ETHNIC

```{r}
ard_stack(
  data = adsl,
  .by = TRT01A,
  ard_continuous( variables = c(AGE, BMI, HEIGHT, WEIGHT)),
  ard_categorical(variables = c(AGEGR1, SEX, RACE, ETHNIC))
)
```

## Exercise 4: Demographics ARD

Also add the following pieces
   
    - overall summaries for all of the variables
    
    - total N 

```{r}
#| eval: FALSE
#| message: TRUE
ard_stack(
  data = adsl,
  .by = TRT01A,
  ard_continuous( variables = c(AGE, BMI, HEIGHT, WEIGHT)),
  ard_categorical(variables = c(AGEGR1, SEX, RACE, ETHNIC)), 
  .overall =  ,
  .total_n =  
)
```

## Exercise 4: Demographics ARD

Also add the following pieces
   
    - overall summaries for all of the variables
    
    - total N 

```{r}
#| message: TRUE
ard_stack(
  data = adsl,
  .by = TRT01A,
  ard_continuous( variables = c(AGE, BMI, HEIGHT, WEIGHT)),
  ard_categorical(variables = c(AGEGR1, SEX, RACE, ETHNIC)), 
  .overall = TRUE,
  .total_n = TRUE
)
```


## {cards}: Hierarchical Summary Functions

- Displays for hierarchical data typically report on each level of the hierarchy (Any AE Overall, by System Organ Class, by Preferred Term)

- Further, subject-level summaries require a different subset of the data each time. For example, to calculate Overall rates, we need to subset to 1 record per subject in ADAE. 

- `ard_stack_hierarchical` stacking functions simplify this multi-step process into a single step

  -   `ard_stack_hierarchical()`: calculating nested **subject-level rates**

  -   `ard_stack_hierarchical_count()`: calculating nested **event-level counts**
  

## {cards}: `ard_stack_hierarchical()`

::: {.small}

- Calculate **subject-level rates** over every level of `variables`

- The `id` argument is used to subset the data along the way

:::
```{r}
#| echo: FALSE
#| message: TRUE

adae <- ADAE |> 
  dplyr::filter(AESOC %in% unique(AESOC)[1:3]) |> 
  dplyr::group_by(AESOC) |> 
  dplyr::filter(AEDECOD %in% unique(AEDECOD)[1:3]) |> 
  dplyr::ungroup()
```
```{r}
#| eval: FALSE
ard_stack_hierarchical(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA,
  id = USUBJID,
  denominator = adsl
)
```

```{r}
#| message: true
#| echo: FALSE
ard_hier <- ard_stack_hierarchical(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA,
  id = USUBJID,
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)

ard_hier |> 
  dplyr::filter(
    dplyr::if_any(c(group2_level, variable_level), ~ .x %in% "GASTROINTESTINAL DISORDERS"), 
    group1_level %in% "Placebo"
    )

```

## {cards}: `ard_hierarchical_count()`

::: {.small}

- Calculate  **event-level counts** over every level of `variables`

:::

```{r echo=FALSE}
options(width = 200)
```

```{r}
#| eval: FALSE
#| message: TRUE
ard_stack_hierarchical_count(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA, 
  denominator = adsl
)
```

```{r}
#| echo: FALSE
#| message: TRUE
ard_hier_c <- ard_stack_hierarchical_count(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = TRTA, 
  denominator = ADSL |> dplyr::rename(TRTA = ARM)
)

ard_hier_c |> 
  dplyr::filter(
    dplyr::if_any(c(group2_level, variable_level), ~ .x %in% "GASTROINTESTINAL DISORDERS"), 
    group1_level %in% "Placebo"
    )
```

## Exercise 5: AE ARD 

::: {.small}
Within every combination of **treatment group (TRT01A)** and **severity (AESEV)**,
  calculate the number and percentage of *unique* subjects (USUBJID) with at least one AE:
    (1) **Overall**, (2) **By each SOC (AESOC)**, and (3) **By each Preferred term (AEDECOD) within SOC (AESOC)**
:::

```{r}
#| eval: FALSE

ard_stack_hierarchical(
  data = ,
  variables = ,
  by = , 
  id = ,
  denominator = 
)
```

## Exercise 5: AE ARD


```{r}
#| message: TRUE
ard_stack_hierarchical(
  data = adae,
  variables = c(AESOC, AEDECOD),
  by = c(TRTA, AESEV), 
  id = USUBJID,
  denominator = adsl,
  over_variables = TRUE
)
```


```{r echo=FALSE}
options(width = 120)
```
